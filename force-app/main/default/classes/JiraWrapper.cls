/**
 * Wrapper classes for Jira entities (Project and Issue)
 */
public class JiraWrapper {
	//private static final String LEAD_ACCOUNT_ID = '1337:0123456789-bfa0-40f4-bd28-25ae65c3e5b1';
	private static final String LEAD_ACCOUNT_ID = '635748d6b7b39379d71f477b';
	private static final String PROJECT_TEMPLATE_KEY = 'com.pyxis.greenhopper.jira:basic-software-development-template';

	/**
	 * Wrapper for Jira Project
	 */
	public class ProjectWrapper {
		public String name;
		public String key;
		public String description;
		public String leadAccountId;
		public String projectTemplateKey;

		/**
		 * Constructor for ProjectWrapper
		 */
		public ProjectWrapper(String name, String key, String description) {
			this.name = name;
			this.key = key;
			this.description = description;
			this.leadAccountId = LEAD_ACCOUNT_ID;
			this.projectTemplateKey = PROJECT_TEMPLATE_KEY;
		}
	}

	/**
	 * Wrapper for Jira Issue
	 */
	public class IssueWrapper {
		public String name;
		public String key;
		public String description;
		public String projectKey;
		public String summary;
		public String issueType;

		/**
		 * Constructor for IssueWrapper
		 */
		public IssueWrapper(
			String projectKey,
			String summary,
			String description,
			String issueType
		) {
			this.projectKey = projectKey;
			this.summary = summary;
			this.description = description;
			this.issueType = (String.isNotBlank(issueType)) ? issueType : 'Task';
		}

		/**
		 * Convert IssueWrapper to a Map for serialization
		 *
		 * TODO: Implement this method to create a Map that represents
		 * the JSON payload needed for the Jira API. The Map should contain:
		 * - fields object with project information (key)
		 * - issuetype object with the issue type name
		 * - summary field
		 * - description field (formatted using formatDescription method)
		 * - Example:
		 */
		public Map<String, Object> generateIssuePayloadMap() {
			// Your implementation goes here
			Map<String, Object> projectMap = new Map<String, Object>();
			projectMap.put('key', this.projectKey);

			Map<String, Object> issueTypeMap = new Map<String, Object>();
			issueTypeMap.put('name', this.issueType);

			Map<String, Object> descriptionMap =formatDescription(this.description);

			Map<String, Object> fields = new Map<String, Object>();
			fields.put('project', projectMap);
			fields.put('summary', this.summary);
			fields.put('description', descriptionMap);
			fields.put('issuetype', issueTypeMap);

			Map<string, Object> mapToSerialize = new Map<String, Object>();
			mapToSerialize.put('fields', fields);


			return mapToSerialize;
		}

		/**
		 * Format description as per Jira Cloud API requirements
		 *
		 * TODO: Implement this method to format the description text
		 * according to Jira Cloud API requirements.
		 * - Create a Map with type="doc" and version=1
		 * - Add content array with paragraph object
		 * - Add text object inside paragraph content with the description
		 * - Example:
		 *   {
		 *     "description": {
		 *       "type": "doc",
		 *       "version": 1,
		 *       "content": [
		 *         {
		 *           "type": "paragraph",
		 *           "content": [
		 *             {
		 *               "type": "text",
		 *               "text": "Order entry fails when selecting supplier."
		 *             }
		 *           ]
		 *         }
		 *       ]
		 *     }
		 *   }
		 */
		private Map<String, Object> formatDescription(String descText) {
			// Your implementation goes here
			Map<String, Object> textObject = new Map<String,Object>();
			textObject.put('type', 'text');
			textObject.put('text', 'textblock');

			List<Object> paragraphContent = new List<Object>();
			paragraphContent.add(textObject);
			
			Map<String,Object> paragraph = new Map<String,Object>();
			paragraph.put('type', 'paragraph');
			paragraph.put('content', paragraphContent);


			List<Object> contentList = new List<Object>();
			contentList.add(paragraph);

			Map<String,Object> description = new Map<String, Object>();
			description.put('type', 'doc');
			description.put('version', 1);
			description.put('content', contentList);
			return description;
		}
	}
}
				// {
		// 	"fields": {
		// 		"project": {
		// 			"key": "SCRUM"
		// 		},
		// 		"summary": "Creating From Collection",
				// "description": {
				// 	"type": "doc",
				// 	"version": 1,
				// 	"content": [
				// 		{
				// 			"type": "paragraph",
				// 			"content": [
				// 				{
				// 					"type": "text",
				// 					"text": "This is an autogenerated issue from a demo."
				// 				}
				// 			]
				// 		}
				// 	]
				// },
		// 		"issuetype": {
		// 			"name": "Task"
		// 		}

		/* Brian's format
		{
  "fields": {
    "description": {
      "content": [
        {
          "content": [
            {
              "text": "test",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "version": 1,
      "type": "doc"
    },
    "summary": "test",
    "project": {
      "key": "TEST"
    },
    "issuetype": {
      "name": "Task"
    }
  }
}
	*/
